use super::{Device, Image};
use ash::vk;
use std::ops::Deref;

pub struct Renderpass {
    pub(crate) renderpass: vk::RenderPass,
}

impl Renderpass {
    pub fn new(
        device: &Device,
        color_format: vk::Format,
        depth_format: vk::Format,
    ) -> Result<Self, vk::Result> {
        let render_attachment = vk::AttachmentDescription::builder()
            .format(color_format)
            .samples(vk::SampleCountFlags::TYPE_1)
            .load_op(vk::AttachmentLoadOp::CLEAR)
            .store_op(vk::AttachmentStoreOp::STORE)
            .stencil_load_op(vk::AttachmentLoadOp::DONT_CARE)
            .stencil_store_op(vk::AttachmentStoreOp::DONT_CARE)
            .initial_layout(vk::ImageLayout::UNDEFINED)
            .final_layout(vk::ImageLayout::COLOR_ATTACHMENT_OPTIMAL);

        let depth_attachment = vk::AttachmentDescription::builder()
            .format(vk::Format::D32_SFLOAT)
            .samples(vk::SampleCountFlags::TYPE_1)
            .load_op(vk::AttachmentLoadOp::CLEAR)
            .store_op(vk::AttachmentStoreOp::DONT_CARE)
            .stencil_load_op(vk::AttachmentLoadOp::DONT_CARE)
            .stencil_store_op(vk::AttachmentStoreOp::DONT_CARE)
            .initial_layout(vk::ImageLayout::UNDEFINED)
            .final_layout(vk::ImageLayout::DEPTH_STENCIL_ATTACHMENT_OPTIMAL);

        let output_attachment = vk::AttachmentDescription::builder()
            .format(color_format)
            .samples(vk::SampleCountFlags::TYPE_1)
            .load_op(vk::AttachmentLoadOp::CLEAR)
            .store_op(vk::AttachmentStoreOp::STORE)
            .stencil_load_op(vk::AttachmentLoadOp::DONT_CARE)
            .stencil_store_op(vk::AttachmentStoreOp::DONT_CARE)
            .initial_layout(vk::ImageLayout::UNDEFINED)
            .final_layout(vk::ImageLayout::PRESENT_SRC_KHR);

        let render_attachment_ref = vk::AttachmentReference::builder()
            .attachment(0)
            .layout(vk::ImageLayout::COLOR_ATTACHMENT_OPTIMAL);

        let depth_attachment_ref = vk::AttachmentReference::builder()
            .attachment(1)
            .layout(vk::ImageLayout::DEPTH_STENCIL_ATTACHMENT_OPTIMAL);

        let output_attachment_ref = vk::AttachmentReference::builder()
            .attachment(2)
            .layout(vk::ImageLayout::COLOR_ATTACHMENT_OPTIMAL);

        let render_color_attachments = &[*render_attachment_ref];
        let render_subpass = vk::SubpassDescription::builder()
            .pipeline_bind_point(vk::PipelineBindPoint::GRAPHICS)
            .color_attachments(render_color_attachments)
            .depth_stencil_attachment(&depth_attachment_ref);

        let upscale_color_attachments = &[*render_attachment_ref, *output_attachment_ref];
        let upscale_subpass = vk::SubpassDescription::builder()
            .pipeline_bind_point(vk::PipelineBindPoint::GRAPHICS)
            .color_attachments(upscale_color_attachments);

        let ui_color_attachments = &[*output_attachment_ref];
        let ui_subpass = vk::SubpassDescription::builder()
            .pipeline_bind_point(vk::PipelineBindPoint::GRAPHICS)
            .color_attachments(ui_color_attachments);

        let render_to_upscale = vk::SubpassDependency::builder()
            .src_subpass(0)
            .dst_subpass(1)
            .src_stage_mask(vk::PipelineStageFlags::COLOR_ATTACHMENT_OUTPUT)
            .src_access_mask(vk::AccessFlags::COLOR_ATTACHMENT_WRITE)
            .dst_stage_mask(vk::PipelineStageFlags::COLOR_ATTACHMENT_OUTPUT)
            .dst_access_mask(vk::AccessFlags::COLOR_ATTACHMENT_WRITE);

        let upscale_to_ui = vk::SubpassDependency::builder()
            .src_subpass(1)
            .dst_subpass(2)
            .src_stage_mask(vk::PipelineStageFlags::COLOR_ATTACHMENT_OUTPUT)
            .src_access_mask(vk::AccessFlags::COLOR_ATTACHMENT_WRITE)
            .dst_stage_mask(vk::PipelineStageFlags::COLOR_ATTACHMENT_OUTPUT)
            .dst_access_mask(vk::AccessFlags::COLOR_ATTACHMENT_WRITE);

        let attachments = &[*render_attachment, *depth_attachment, *output_attachment];
        let subpasses = &[*render_subpass, *upscale_subpass, *ui_subpass];
        let dependencies = &[*render_to_upscale, *upscale_to_ui];
        let create_info = vk::RenderPassCreateInfo::builder()
            .attachments(attachments)
            .subpasses(subpasses)
            .dependencies(dependencies);

        let renderpass = unsafe { device.create_render_pass(&create_info, None)? };

        Ok(Self { renderpass })
    }

    pub fn create_framebuffer(
        &self,
        device: &Device,
        width: u32,
        height: u32,
        attachments: &[vk::ImageView],
    ) -> Result<vk::Framebuffer, vk::Result> {
        let create_info = vk::FramebufferCreateInfo::builder()
            .render_pass(**self)
            .attachments(attachments)
            .width(width)
            .height(height)
            .layers(1);

        unsafe { device.create_framebuffer(&create_info, None) }
    }
}

impl Deref for Renderpass {
    type Target = vk::RenderPass;

    fn deref(&self) -> &Self::Target {
        &self.renderpass
    }
}
